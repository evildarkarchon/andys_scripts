#!/usr/bin/env python3
import pathlib
import argparse

from andy.util import Util
from andy.videoinfo import VideoInfo, GenVideoInfo, FindVideoInfo

util = Util()

args = argparse.ArgumentParser()
args.add_argument("--reset-json", "-rj", action="store_true", help="Reset the JSON cache instead of the videoinfo table.")
args.add_argument("--reset-all", "-r", action="store_true", help="Reset both the JSON cache and the videoinfo table.")
args.add_argument("directory", default="/data/Private", nargs="?", help="Directory to look for videoinfo databases")
options = vars(args.parse_args())

fvi = FindVideoInfo()

directories = list(FindVideoInfo.find(options["directory"]))

for directory in directories:
    vi = VideoInfo(str(pathlib.Path(directory).resolve().joinpath("videoinfo.sqlite")))
    gvi = GenVideoInfo(str(pathlib.Path(directory).resolve().joinpath("videoinfo.sqlite")))
    path = pathlib.Path(directory).resolve()

    def gfl():
        """Generator function that iterates over the directory specified in the directory variable and yields all files contained within."""

        for filename in path.iterdir():
            yield str(filename)

    files = list(gfl())

    if options["reset_json"] or options["reset_all"]:
        vi.resetjson()

    if not options["reset_json"]:
        vi.resetvideoinfo()
        filelist = Util.sortentries(list(gvi.genfilelist(files)))
        hashes = dict(gvi.genhashlist(filelist))
        for filename in filelist:
            gvi.write(gvi.generate(filename, gvi.gvigenjson(filename), hashes[filename]))
