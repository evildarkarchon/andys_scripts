#!/usr/bin/env python3
# pylint: disable=w0611
import pathlib
import argparse
from sqlalchemy import create_engine  # , Column, Float, Integer, String
# from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from andy2.util import Util, Mood
from andy2.videoinfo import VideoInfo, VideoJSON, VideoData, FindVideoInfo, Info, sqa_session

args = argparse.ArgumentParser(description="resetvideoinfo: Resets all videoinfo databases in a directory.")
args.add_argument("--verbose", "-v", action="store_true", help="Run in verbose mode.")
args.add_argument("--regen-json", "-rj", action="store_true", help="Regenerate the json cache as well")
args.add_argument("directory", default="/data/Private", nargs="?", help="Directory to look for videoinfo databases")

options = vars(args.parse_args())
del args

fvi = FindVideoInfo()

directories = list(fvi.find(options["directory"]))

for directory in directories:
    path = pathlib.Path(directory).resolve()

    def gfl():
        """Generator function that iterates over the directory specified in the directory variable and yields all files contained within."""

        for filename in path.iterdir():  # pylint: disable=e1101, w0640, w0621
            yield str(filename)

    files = list(gfl())

    vd = VideoData(db=str(path.joinpath("videoinfo.sqlite")), verbose=options["verbose"], regen=True, regenjson=options["regen_json"])

    database = create_engine("sqlite:///{}".format(str(path.joinpath("videoinfo.sqlite"))))
    sm = sessionmaker(bind=database)
    session = sm()
    filelist = Util.sortentries(list(vd.genfilelist(files)))
    filehashes = dict(vd.genhashlist(filelist))
    for filename in filelist:
        print("{} Putting information from {} into the database.".format(Mood.happy(), pathlib.Path(filename).name))
        vi = VideoInfo()
        vj = VideoJSON()
        filejson = vd.parse(filename)
        # print(filehashes)
        fileinfo = Info(filename, filejson, filehashes[filename])
        if options["verbose"]:
            print("{} Video Information:\n{}".format(Mood.happy(), fileinfo))
        with sqa_session(session) as sess:
            vi.filename = fileinfo.filename
            vi.duration = fileinfo.duration
            vi.duration_raw = fileinfo.duration_raw
            vi.numstreams = fileinfo.numstreams
            vi.container = fileinfo.container
            vi.width = fileinfo.width
            vi.height = fileinfo.height
            vi.frame_rate = fileinfo.frame_rate
            vi.type_0 = fileinfo.type_0
            vi.type_1 = fileinfo.type_1
            vi.codec_0 = fileinfo.codec_0
            vi.codec_1 = fileinfo.codec_1
            vi.bitrate_0 = fileinfo.bitrate_0
            vi.bitrate_0_raw = fileinfo.bitrate_0_raw
            vi.bitrate_1 = fileinfo.bitrate_1
            vi.bitrate_1_raw = fileinfo.bitrate_1_raw
            vi.bitrate_total = fileinfo.bitrate_total
            vi.filehash = fileinfo.hash
            if not session.query(VideoJSON).filter(VideoJSON.filename == fileinfo.filename).count() >= 1 or options["regen_json"]:
                vj.json = fileinfo.jsondata
                vj.filename = fileinfo.filename
                sess.add(vj)
            sess.add(vi)
        del vi
        del filejson
        del fileinfo
