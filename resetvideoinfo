#!/usr/bin/python3.5
import pathlib
import magic
import argparse

from andy.sortentries import sortentries
from andy.runprogram import runprogram
from andy.colors import Color

colors=Color()

args=argparse.ArgumentParser()
args.add_argument("--reset-json", "-rj", action="store_true", help="Reset the JSON cache instead of the videoinfo table.")
args.add_argument("--reset-all", "-r", action="store_true", help="Reset both the JSON cache and the videoinfo table.")
args.add_argument("directory", default="/data/Private", nargs="?", help="Directory to look for videoinfo databases")
options=vars(args.parse_args())

if pathlib.Path(options["directory"]).is_dir():
    pass
else:
    if not pathlib.Path(options["directory"]).exists():
        print("{} Specified directory does not exist.")
        raise FileNotFoundError
    else:
        print("{} Specified location is not a directory.")
        raise NotADirectoryError

fileglob=pathlib.Path(options["directory"]).rglob("videoinfo.sqlite")

dirlist=[]

for filename in fileglob:
    with magic.Magic() as m:
        filetype=m.id_filename(str(filename))
        if "SQLite 3.x database" in filetype:
            dirlist.append(str(filename.parent))

dirlist=sortentries(dirlist)

newline=False

for directory in dirlist:
    if newline:
        print('')
    if newline is False:
        newline=True
    print("{} Resetting videoinfo database in {}".format(colors.mood("happy"), str(directory)))
    if options["reset_json"] or options["reset_all"]:
        runprogram(["genvideoinfo", "--reset-json"], workdir=str(directory))
    if not options["reset_json"]:
        runprogram(["genvideoinfo", "--regen"], workdir=str(directory))
