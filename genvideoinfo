#!/usr/bin/python3.5
import pathlib
import argparse
import locale
import sys

from andy.videoinfo import VideoInfo, GenVideoInfo
from andy.util import Color, Util

locale.setlocale(locale.LC_ALL, 'en_US.utf-8')

args = argparse.ArgumentParser(description="genvideoinfo: a simple video metadata extractor.")
args.add_argument("--database", "-db", default=str(pathlib.Path.cwd().joinpath("videoinfo.sqlite")), help="Location of the sqlite database to save the information into.")
args.add_argument("--debug", "-d", action="store_true", help="Run in debug mode.")
args.add_argument("--delete", "-del", action="store_true", help="Delete the files specified from the database")
args.add_argument("--maintainence", "-m", action="store_true", help="Run in maintainence mode.")
args.add_argument("--regen", "-r", action="store_true", help="Regenerate the videoinfo table of the database.")
args.add_argument("--reset-json", "-rj", action="store_true", help="Resets the videojson table.")
args.add_argument("--reset-all", "-ra", action="store_true", help="Reset both the videojson and videoinfo table.")
args.add_argument("files", nargs="*", help="Files to get information from.")

options = vars(args.parse_args())

vi = VideoInfo(options["database"])
gvi = GenVideoInfo(options["database"], debug=options["debug"])
colors = Color()
util = Util()

if options["regen"]:
    vi.resetvideoinfo()

if options["reset_json"]:
    vi.resetjson()
    sys.exit(0)

if options["maintainence"]:
    vi.maintainence()
    sys.exit(0)

if options["reset_all"]:
    vi.resetvideoinfo()
    vi.resetjson()

if not options["files"] or pathlib.Path(options["files"]).is_dir():
    if not options["files"]:
        temp1 = pathlib.Path.cwd().iterdir()
    elif options["files"] and pathlib.Path(options["files"]).is_dir():
        temp1 = pathlib.Path(options["files"]).iterdir()
    options["files"] = []
    for path in temp1:
        options["files"].append(str(path))

if not options["delete"] and not options["reset_json"] and not options["maintainence"]:
    existinghashes = dict(gvi.genexisting())
    filelist = util.sortentries(list(gvi.genfilelist(options["files"], existinghashes)))
    if options["debug"]:
        print(filelist)

    if len(filelist) is 0:
        print("{} All files are already in the database or there are no files.".format(colors.mood("happy")))
        sys.exit(0)

    hashes = dict(gvi.genhashlist(filelist, existinghashes))

if options["delete"]:
    for filename in options["files"]:
        vi.deleteentry(filename)

if not options["delete"] and not options["maintainence"]:
    for filename in filelist:
        jsondump = gvi.gvigenjson(filename)
        gvi.write(gvi.generate(filename, jsondump, hashes[filename]), jsondump)
