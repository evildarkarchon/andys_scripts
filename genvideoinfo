#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'pathname'
require 'find'
require 'fileutils'
require 'data_mapper'
begin
  require 'power_p'
rescue LoadError
  nil
end

require_relative 'andyrb/mood'
require_relative 'andyrb/util/hashfile'
require_relative 'andyrb/core/cleanup'
require_relative 'andyrb/core/monkeypatch'
require_relative 'andyrb/videoinfo/database'
require_relative 'andyrb/videoinfo/genhash'
require_relative 'andyrb/videoinfo/filelist'
require_relative 'andyrb/options'

AndyCore.monkeypatch(Array, AndyCore::Array::Cleanup)

opts = Options.new(ARGV.dup.cleanup) do |defaults|
  defaults[:db] = Pathname.getwd.join('videoinfo.sqlite')
  defaults[:debug] = false
  defaults[:verbose] = false
  defaults[:maintainence] = false
  defaults[:regen] = false
  defaults[:reset_json] = false
  defaults[:reset_all] = false
end
def opts.files
  out = @source.dup
  out = out.nil? || out.empty? ? [] : out
  out.keep_if { |f| File.file?(f) } unless nil? || empty?
  out.freeze
end
opts.parse_args! do |h, i|
  h.on('--database [file]', String, 'Location where the database will be written') { |d| i[:db] = d }
  h.on('-d', '--debug', "Don't actually do anything, just print what would be done.") do
    i[:debug] = true
    i[:verbose] = true
  end
  h.on('-r', '--regen', 'Drops and recreates the videoinfo table (used for schema changes, testing, etc.)') { i[:regen] = true }
  h.on('--reset-json', 'Drops and recreates the videojson table.') { i[:reset_json] = true }
  h.on('--reset-all', 'Drops and recreates both the videoinfo and videojson tables.') { i[:reset_all] = true }
  h.on('-v', '--verbose', 'Activates verbose mode') { i[:verbose] = true }
  h.on('-m', '--mantainence', 'Vacuum the database.') { i[:maintainence] = true }
end
files = opts.files

p opts if opts[:args][:debug]

if files.nil? || files.empty?
  wdpath = Pathname.getwd.find.to_a.keep_if(&:file?)
  p wdpath if opts[:args][:debug]
  files = wdpath.map(&:to_s)
  p files if opts[:args][:debug]
end

FileUtils.touch(opts[:args][:db].basename.to_s) unless opts[:args][:db].file?

DataMapper::Model.raise_on_save_failure = true
DataMapper.setup(:default, "sqlite:#{opts[:args][:db].realpath}")
DataMapper::Logger.new($stdout, :debug) if [opts[:args][:debug], opts[:args][:verbose]].any?

db = DataMapper.repository(:default).adapter
gvi = VideoInfo::Database::Data.new(opts[:args][:db].realpath, opts[:args][:verbose])
DataMapper.finalize

begin
  DataMapper.auto_upgrade! unless opts[:args][:reset_all]
rescue DataObjects::SyntaxError
  DataMapper.auto_migrate!
end
DataMapper.auto_migrate! if opts[:args][:reset_all]

if opts[:args][:regen] && !opts[:args][:reset_all]
  puts Mood.neutral('Resetting videoinfo table')
  begin
    VideoInfo::Database::Videoinfo.auto_upgrade! # avoid not null errors
    VideoInfo::Database::Videoinfo.all.destroy
  rescue DataObjects::SyntaxError
    VideoInfo::Database::Videoinfo.auto_migrate!
  end

  DataMapper.auto_upgrade!
  db.execute('vacuum')
end

if [opts[:args][:reset_json], !opts[:args][:reset_all]].all?
  puts Mood.neutral('Resetting JSON Cache')
  VideoInfo::Database::Videojson.all.destroy
  # db.execute('drop table if exists videojson')
  begin
    VideoInfo::Database::Videojson.auto_upgrade!
  rescue DataObjects::SyntaxError
    VideoInfo::Database::Videojson.auto_migrate!
  end
  db.execute('vacuum')
  exit
end

if opts[:args][:mantainence]
  puts Mood.neutral('Vacuuming Database.')
  db.execute('vacuum')
  exit
end

initlist = []

if files.respond_to?(:empty?) && !files.empty?
  initlist = files.map do |i|
    path = Pathname.new(i).freeze
    dir = nil
    if path.directory?
      dir = path.find.to_a
      dir.keep_if(&:file?)
      dir.map!(&:to_s)
    end
    dir unless path.file?
    path.realpath.to_s if path.file?
  end
end

initlist.cleanup!.freeze

existing = gvi.existing
existing.map!(&:filename) if existing.respond_to?(:map!)
existing.freeze unless frozen?

# print "#{existing}\n"
filelist = VideoInfo.genfilelist(initlist, testmode: opts[:args][:debug])
filelist.delete_if { |h| existing.include?(File.basename(h.to_s)) } unless existing.nil? || existing.empty?
filelist.freeze unless frozen?

if opts[:args][:debug]
  puts 'Initial list:'
  p initlist

  puts 'Existing hash list:'
  p existing

  puts 'File list:'
  p filelist
end

case
when filelist.empty?
  puts(Mood.happy { 'All files already in the database or there are no media files.' })
  exit
end

digests = Util.hashfile(filelist).freeze

case
when opts[:args][:debug]
  # print "#{digests}\n"
  # print "#{filelist}\n"
  p digests
  p filelist
end

filelist.each do |file|
  insert = VideoInfo::Database::Videoinfo.new
  jsondata = gvi.json(file).freeze
  case
  when opts[:args][:debug]
    # print "#{digests[file]}\n"
    # print "#{file}\n"
    puts "#{file.inspect}: #{digests[file].inspect}"
  when !opts[:args][:debug]
    VideoInfo.genhash(file, jsondata, digests) do |h|
      begin
        puts(Mood.happy { "Writing metadata for #{File.basename(file)}" })
        insert.attributes = h
        insert.save
      rescue DataMapper::SaveFailureError
        insert.errors.each { |e| puts e } if opts[:args][:verbose]
      end
    end
  end
  p VideoInfo.genhash(file, jsondata, digests) if opts[:args][:debug]
end
