#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'
require 'fileutils'
require 'subprocess'

require_relative 'andyrb/util/program'
require_relative 'andyrb/util/datediff'
require_relative 'andyrb/git'
require_relative 'andyrb/mood'
require_relative 'andyrb/core/cleanup'
require_relative 'andyrb/core/monkeypatch'
require_relative 'andyrb/options'

AndyCore.monkeypatch(Array, AndyCore::Array::Cleanup)

Opts = Options.new(ARGV.dup.cleanup) do |defaults|
  defaults[:aggressive] = false
  defaults[:replace] = false
  defaults[:gc] = false
  defaults[:restart] = false
  defaults[:container] = nil
end
Opts.parse_args! do |h, i|
  h.on('-a', '--aggressive', 'Activate git gc in aggressive mode if run.') { i[:aggressive] = true }
  h.on('-r', '--replace', 'Rename any existing directory if a repository is not found.') { i[:aggressive] = true }
  h.on('-g', '--garbage-collect', 'Force garbage collection to run.') { i[:gc] = true }
  h.on('--container', 'Specify a container for systemctl to run in. (Only relevant if --restart-ttrssd is used.)') { |x| i[:container] = x }
  h.on('--restart-ttrssd', 'Restart ttrssd.') { i[:restart] = true }
end

TTrss = Git.new('/data/web/feeds', use_sudo: true, sudo_user: 'nginx')
at_exit do
  TTrss.clean_lock
end

def touchgcfile
  cachepath = Pathname.new('/var/cache/ttrssgc').freeze

  use_sudo = cachepath.parent.writable? ? false : true
  use_sudo.freeze

  case
  when use_sudo
    Util::Program.runprogram(%W[touch #{cachepath}], use_sudo: true)
  else
    FileUtils.touch(cachepath.to_s)
  end
end

touchgcfile unless File.exist?('/var/cache/ttrssgc')

def ttrssgc(thendate)
  diff = Util.datediff(thendate).freeze
  begin
    TTrss.gc(aggressive: Opts[:args][:aggressive]) if diff >= 30 || Opts[:args][:gc]
  rescue Interrupt => e
    raise e
  else
    touchgcfile if diff >= 30 || Opts[:args][:gc]
  end
end

repopath = Pathname.new('/data/web/feeds/.git').freeze
wdpath = repopath.parent.freeze
giturl = 'https://tt-rss.org/git/tt-rss.git'
case
when repopath.directory?
  TTrss.clean_lock
  TTrss.pull
when wdpath.exist? && !repopath.exist?
  case
  when Opts[:replace]
    puts(Mood.neutral { "No git repository located in the target directory, renaming it to #{wdpath}.old" })
    Util::Program.runprogram(%W[mv #{wdpath} #{wdpath}.old], use_sudo: true, sudo_user: 'nginx')
    TTrss.clone(giturl)
  else
    raise 'No git repository located in the target directory.'
  end
when wdpath.file?
  puts Mood.neutral('Target location is a file, renaming and cloning repository.')
  Util::Program.runprogram(%W[mv #{wdpath} #{wdpath}.bad], use_sudo: true, sudo_user: 'nginx')
  TTrss.clone(giturl)
else
  puts Mood.neutral('Target location does not exist, cloning repository')
  TTrss.clone(giturl)
end

ttrssgc(File.stat('/var/cache/ttrssgc').mtime)
if Opts[:args][:restart]
  begin
    print(Mood.happy('Restarting ttrssd... '))
    cmdline = %w[systemctl]
    cmdline += %W[-m #{Opts[:args][:container]}] if Opts[:args][:container]
    cmdline += %w[restart ttrssd]
    Util::Program.runprogram(cmdline, use_sudo: true)
  rescue Interrupt, Subprocess::NonZeroExit
    puts('failed')
    raise
  else
    puts('done')
  end
end
