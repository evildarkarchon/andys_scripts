#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'
require 'json'
require 'shellwords'
require 'subprocess'
require 'data_mapper'
begin
  require 'power_p'
rescue LoadError
  nil
end

require_relative 'andyrb/core/cleanup'
require_relative 'andyrb/core/sort'
require_relative 'andyrb/core/monkeypatch'
require_relative 'andyrb/util/program'
require_relative 'andyrb/util/recursive_symbolize_keys'
require_relative 'andyrb/absconvert'
require_relative 'andyrb/videoinfo/database'

AndyCore.monkeypatch(Array, [AndyCore::Array::Cleanup, AndyCore::Array::NatSort])

opts = ABSConvert::Options.new(ARGV.dup)
opts.parse_args!
opts.parse_files!
opts.parse_config!
p opts if opts[:args][:debug]
progs = { ffmpeg: Util::FindApp.which('ffmpeg'), mkvpropedit: Util::FindApp.which('mkvpropedit') }

DataMapper.setup(:default, "sqlite:#{opts[:args][:db].realpath}")
DataMapper::Logger.new($stdout, :debug) if opts[:args][:verbose] || opts[:args][:debug]
rates = {}
rates[:bitrates] = opts[:args][:videobitrate] || opts[:args][:audiobitrate] ? { videobitrate: opts[:args][:videobitrate], audiobitrate: opts[:args][:audiobitrate] } : nil
rates[:framerate] = opts[:args][:framerate] ? opts[:args][:framerate] : nil
opts.files.each do |i|
  metadata = ABSConvert::Metadata.new(i, opts[:args][:db], verbose: opts[:args][:verbose], bitrate: rates[:bitrates], framerate: rates[:frame_rate], novideo: opts[:args][:novideo])
  filepath = Pathname.new(i)
  # outpath = Pathname.new(Args.outputdir.join(filepath.basename.sub_ext(outcon).to_s).to_s)
  outcon =
    case
    when opts[:args][:container]
      ".#{opts[:args][:container]}"
    when opts[:config][:defaults][:container]
      ".#{opts[:config][:defaults][:container]}"
    else
      '.mkv'
    end
  outcon.freeze
  outpath = opts[:args][:outputdir].join(filepath.basename.sub_ext(outcon)).freeze
  logpath = filepath.sub_ext('-0.log').freeze if opts[:args][:passes] == 2
  begin
    if opts[:args][:passes] == 2
      pass1 = ABSConvert::CmdLine.new(i, opts[:args], opts[:config], verbose: opts[:args][:verbose], passnum: 1, passmax: 2)
      pass1.generate!(metadata.bitrates, metadata.frame_rate, progs[:ffmpeg])
      pass2 = ABSConvert::CmdLine.new(i, opts[:args], opts[:config], verbose: opts[:args][:verbose], passnum: 2, passmax: 2)
      pass2.generate!(metadata.bitrates, metadata.frame_rate, progs[:ffmpeg])

      Util::Program.runprogram(pass1.list)
      Util::Program.runprogram(pass2.list)
    elsif opts[:args][:passes] == 1 && opts[:args][:novideo]
      cmdline = ABSConvert::CmdLine.new(i, args, opts[:config], verbose: opts[:args][:verbose], passnum: 1, passmax: 1)
      cmdline.generate!(metadata.bitrates, metadata.frame_rate, progs[:ffmpeg])

      Util::Program.runprogram(cmdline.list)
    end
  rescue Subprocess::NonZeroExit, Interrupt => e
    puts Mood.neutral('Removing unfinished output file.')
    outpath.delete if outpath.exist?
    raise e
  else
    Util::Program.runprogram(%W[#{progs[:mkvpropedit]} --add-track-statistics-tags #{outpath}]) if opts[:args][:stats] && outpath.exist? && (outcon == '.mkv' || outcon == '.mka') && !opts[:args][:debug]

    if !opts[:args][:converttest] && !opts[:args][:debug]
      del = VideoInfo::Database::Videoinfo.all(filename: filepath.basename.to_s)
      deljson = VideoInfo::Database::Videojson.all(filename: filepath.basename.to_s)
      del.destroy
      deljson.destroy
    elsif opts[:args][:converttest]
      puts Mood.happy('In convert testing mode, not deleting database entry')
    end
  ensure
    logpath.delete if [opts[:args][:passes] == 2, logpath && logpath.exist?, !opts[:args][:debug]].all?
  end

  ABSConvert.backup(file, opts[:args][:backup].to_s) if opts[:args][:backup] && !opts[:args][:debug]
end
