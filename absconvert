#!/usr/bin/python3.5
import json
import sqlite3
import argparse
import pathlib

from andy.python_version import is_python_version
from andy.colors import Color
from andy.flatten import flatten
from andy.runprogram import runprogram
from andy.prettylist import prettylist
from andy.sortentries import sortentries
from andy.genjson import genjson
from andy.listfilter import listfilter
from andy.abs import ABS

colors=Color()

args=argparse.ArgumentParser(description="A Basic Simple Converter: A Batch Conversion Frontend for ffmpeg", fromfile_prefix_chars="@", formatter_class=argparse.ArgumentDefaultsHelpFormatter)

video=args.add_argument_group(description="Video options:")
audio=args.add_argument_group(description="Audio Options:")
config=args.add_argument_group(description="Configuration/Testing options:")
test=config.add_mutually_exclusive_group()

video.add_argument("--passes", "-p", choices=[1, 2], type=int, help="Number of video encoding passes.")
video.add_argument("--video-bitrate", "-vb", help="Bitrate for the video codec.")
video.add_argument("--video-codec", "-vc", help="Video codec to use.")

audio.add_argument("--audio-bitrate", "-ab", help="Bitrate for the audio codec.")
audio.add_argument("--audio-codec", "-ac", help="Audio codec to use.")
audio.add_argument("--filter", "-f", help="Filter to be applied to the audio.")

config.add_argument("--database", "-d", help="Location of the video info database.")
config.add_argument("--config", "-c", default="/home/evildarkarchon/.config/absconvert.json", help="Location of the configuration file (JSON format).")
config.add_argument("--container", "-ct", help="Container format to put the video in.")
config.add_argument("--no-sort", "-ns", action="store_true", help="Don't sort the list of files to be encoded.")

test.add_argument("--debug", "-db", action="store_true", help="Print ALL variables and exit")
test.add_argument("--test", "-t", action="store_true", help="Print some variables and exit.")

args.add_argument("files", nargs="*", help="Files to encode.")

options=vars(args.parse_args())

if not options["database"]:
    if pathlib.Path(str(pathlib.Path.cwd()), "videoinfo.sqlite").exists():
        options["database"]=pathlib.Path(str(pathlib.Path.cwd()), "videoinfo.sqlite")
    else:
        options["database"]=None

abs=ABS(database=options["database"], debug=options["debug"], test=options["test"])

if options["debug"]:
    print(options)

with open(options["config"]) as jsonsource:
    config=json.loads(jsonsource.read())

if options["debug"]:
    print(config)

if options["container"]:
    options["container"]=".{}".format(options["container"])
elif not options["container"]:
    options["container"]=".{}".format(config["defaults"]["container"])

if not options["video_codec"]:
    options["video_codec"]=config["defaults"]["video"]

if not options["audio_codec"]:
    options["audio_codec"]=config["defaults"]["audio"]

if not options["filter"]:
    options["filter"]=config["options"]["audiofilter"]

if options["audio_codec"] in config["codecs"]:
    options["audiocodecopts"]=config["codecs"][options["audio_codec"]]
else:
    options["audiocodecopts"]=None

if options["video_codec"] in config["codecs"]:
    options["videocodecopts"]=config["codecs"][options["video_codec"]]
else:
    options["videocodecopts"]=None

if not options["passes"]:
    options["passes"]=config["defaults"]["passes"]

if not options["no_sort"]:
    options["files"]=sortentries(options["files"])

for files in options["files"]:
    abs.convert(files, videocodec=options["video_codec"], videobitrate=options["video_bitrate"], audiocodec=options["audio_codec"], audiofilteropts=options["filter"], passes=options["passes"], audiocodecopts=options["audiocodecopts"], audiobitrate=options["audio_bitrate"], videocodecopts=options["videocodecopts"], container=options["container"])
