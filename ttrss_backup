#!/usr/bin/env python3
# pylint: disable=line-too-long
import pathlib
import shutil
import logging
import systemd.journal as journal  # pylint: disable=e0401
import argparse
import lzma
import locale
from datetime import datetime
import os

from andy.util import Mood, Program, Util

locale.setlocale(locale.LC_ALL, 'en_US.utf-8')

pgdump = shutil.which("pg_dump", mode=os.X_OK)

args = argparse.ArgumentParser()
args.add_argument("--cron", "-c", action="store_true", help="Activate this program in cron mode.")
options = (vars(args.parse_args()))

if options["cron"]:
    logformat = '%(asctime)-15s %(message)s'
    logging.basicConfig(format=logformat)

    log = logging.getLogger('backup')
    log.propagate = False
    log.addHandler(journal.JournalHandler(SYSLOG_IDENTIFIER="ttrss_backup"))
    log.setLevel(logging.DEBUG)

if not pgdump:
    print("{} pg_dump could not be found or is not executable.".format(Mood.sad()))
    raise FileNotFoundError

database = "feeds"
filename = str(pathlib.Path("/data/ttrssbackup").joinpath("feeds-{}.{}".format(datetime.now().strftime("%Y%m%d_%H%M"), "tar.xz")))

try:
    with open(filename, mode="wb") as db:
        if options["cron"]:
            log.info("Dumping Database.")
        else:
            print("{} Dumping Database.".format(Mood.happy()))

        data = Program.returninfo([pgdump, "-C", "-F", "t", "-c", "--if-exists", "-d", database, "-U", "postgres"], string=False)

        if options["cron"]:
            log.info("Compressing Data.")
        else:
            print("{} Compressing Data.".format(Mood.happy()))
        compress = lzma.compress(data)
        if options["cron"]:
            log.info("Writing File: {}.".format(filename))  # pylint: disable=W1202
        else:
            print("{} Writing File: {}".format(Mood.happy(), filename))
        db.write(compress)
except KeyboardInterrupt:
    pathlib.Path(filename).unlink()
    raise

now = datetime.now()

files = Util.sortentries(pathlib.Path("/data/ttrssbackup").rglob("feeds*.tar.xz"))

for filepath in files:
    then = datetime.fromtimestamp(filepath.stat().st_mtime)
    filetime = now - then
    if filetime.days > 14:
        if options["cron"]:
            log.info("Removing {} from backup directory.".format(filepath.name))  # pylint: disable=W1202
        else:
            print("{} Removing {} from backup directory.".format(Mood.neutral(), filepath.name))
        filepath.unlink()
