#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'
require 'shellwords'
require 'logger'
require 'date'
require 'childprocess'
require 'fileutils'

require_relative 'andyrb/util'
require_relative 'andyrb/mood'
require_relative 'andyrb/options'
require_relative 'andyrb/core/cleanup'
require_relative 'andyrb/core/monkeypatch'

AndyCore.monkeypatch(Array, AndyCore::Array::Cleanup)

opts = Options.new(ARGV.dup.cleanup(unique: false)) do |defaults|
  defaults[:cron] = false
end
opts.parse_args! do |h, i|
  h.on('-c', '--cron', "Don't output pretty text and enable logging.") { i[:cron] = true }
end
# Args = Options.parse(ARGV.dup.cleanup(unique: false))

Now = Time.now.strftime('%Y%m%d_%H%M').freeze
IP = '192.168.0.104'

begin
  Log = opts[:args][:cron] ? Logger.new('/var/log/ttrss/ttrss_backup.log', 'monthly') : nil
rescue Errno::EACCES
  Log = nil
end

PgDump = Util.findapp('pg_dump').freeze
Xz = Util.findapp('xz').freeze

out = "/data/ttrssbackup/feeds-#{Now}.xz"
File.open(out, 'w+', 0o644) do |o|
  xz = ChildProcess.build(Xz, '-k', '-C', 'sha256', '-T', '0', '-c')
  xz.duplex = true
  xz.io.stdout = o
  xz.start

  pg = ChildProcess.build(PgDump, '-C', '-c', '--if-exists', '-d', 'feeds', '-U', 'postgres', '-h', IP)
  pg.io.stdout = xz.io.stdin
  puts(Mood.happy { "Dumping database to #{out}" })
  pg.start
  pg.wait
  xz.io.stdin.close
  xz.wait
end

cpath = Pathname.new('/data/ttrssbackup').freeze
clean = cpath.find.to_a
clean.keep_if(&:file?).freeze

clean.each do |f|
  diff = Util.datediff(f.mtime).freeze
  puts(Mood.happy { "Removing #{f}" }) if diff > 14 && !Log.respond_to?(:info)
  Log.info { "Removing #{f}" } if diff > 14 && Log.respond_to?(:info)
  f.delete if diff > 14
end
