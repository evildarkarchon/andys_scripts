#!/usr/bin/env python3
import argparse
import itertools  # noqa: F401 pylint: disable=w0611
import os
import pathlib
import shutil

from andypy.abswebpconvert import \
    ABSWebPConvert  # noqa: F401 pylint: disable=w0611
from andypy.mood2 import Mood  # noqa: F401 pylint: disable=w0611
from andypy.program import Program  # noqa: F401 pylint: disable=w0611
from andypy.util.cleanlist import cleanlist
from andypy.util.resolvepaths import resolvepaths
from andypy.util.sortfiles import sortfiles

if 'Just Downloaded' in os.getcwd():
    backuparchivedir = pathlib.Path.cwd().parent.joinpath('Original Files')
else:
    backuparchivedir = pathlib.Path.cwd().joinpath('Original Files')
backuparchive = str(backuparchivedir.joinpath("{}.7z".format(backuparchivedir.parent.name)))


# parser = argparse.ArgumentParser(description='A "simple" script to convert images to WebP using ImageMagick.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser = argparse.ArgumentParser(description='A "simple" script to convert images to WebP using ImageMagick.')
mode = parser.add_mutually_exclusive_group()
debug = parser.add_argument_group()
mode.add_argument('--lossy', action='store_true', help="Encode images in lossy mode.")
mode.add_argument('--lossless', action='store_true', help="Encode images in lossless mode.")
parser.add_argument('--quality', '-q', nargs='?', type=int, default=80, help="Quality factor (0-100).")
parser.add_argument('--no-sort', action='store_false', dest='sort', help="Don't sort the file list.")
parser.add_argument('--backup-archive', nargs='?', type=pathlib.Path, help='Location to store the archive of original images.', default=pathlib.Path(backuparchive))
parser.add_argument('--backup-dir', nargs='?', type=pathlib.Path, help='Directory to put the original file (disables the backup archive feature)')
parser.add_argument('--output-dir', nargs='?', type=pathlib.Path, help='Directory to store the resulting images.', default=pathlib.Path.cwd())
parser.add_argument('--no-archive', action='store_false', dest='archive', help='Disable backing up the source images to an archive.')
parser.add_argument('--no-del-original', action='store_false', dest='del_original', help='Keep the original files.')
parser.add_argument('--force', action='store_true', help='Move any existing files.')
parser.add_argument('--verbose', '-v', action='store_true', help='Make the script more chatty.')
debug.add_argument('--debug', '-d', action='store_true', help='Print variables and exit')
debug.add_argument('--debug-cleanlist', action='store_true', help='Remove the safties from the cleanlist function and activate debug mode.')
debug.add_argument('--quiet-cleanlist', action='store_true', help='Suppress cleanlist errors')
parser.add_argument('--convert-path', dest='convert', type=str, default=shutil.which('convert', mode=os.X_OK))
parser.add_argument('--7z-path', dest='7z', type=str, default=shutil.which('7za', mode=os.X_OK))

parser.add_argument('files', nargs='+', type=pathlib.Path)

args = vars(parser.parse_args())

explicit = bool(args['lossy'] or args['lossless'])

if args['debug_cleanlist']:
    args['debug'] = True


'''def resolvepaths(path):
    if path.exists():
        return path.resolve()'''

# args['files'] = [resolvepaths(x) for x in args['files']]
# args['files'] = [x for x in args['files'] if x is not None]
args['files'] = resolvepaths(args['files'])
if args['debug_cleanlist']:
    args['files'] = cleanlist(args['files'], debug=True)
elif args['quiet_cleanlist']:
    args['files'] = cleanlist(args['files'], quiet=True)
else:
    args['files'] = cleanlist(args['files'])

if args['sort']:
    if args['debug']:
        print(Mood.neutral("Sorted File List:"))
        print(sortfiles(args['files']))
        print()
    args['files'] = sortfiles(args['files'])

if args['debug']:
    print(Mood.neutral('Script Command-line Dictionary:'))
    print(args)
    print()

outmode = None
if args['lossy']:
    outmode = 'lossy'
elif args['lossless']:
    outmode = 'lossless'


def gencmdlines():
    for f in args['files']:
        yield str(f), ABSWebPConvert.cmdline(f, args['output_dir'], verbose=args['verbose'], quality=args['quality'], mode=outmode, explicit=explicit, exepath=args['convert'])


cmdlines = dict(gencmdlines())
if args['debug']:
    print(Mood.neutral('Conversion Command-line Dictionary:'))
    print(cmdlines)

if not args['debug'] and not args['output_dir'].exists():
    try:
        args['output_dir'].mkdir(mode=0o755, parents=True, exist_ok=True)
    except TypeError:
        try:
            args['output_dir'].mkdir(mode=0o755, parents=True)
        except FileExistsError:
            if not args['output_dir'].is_file():  # gotta handle the weird edge cases
                pass
            else:
                raise

for i in args['files']:
    cmdline = cmdlines.pop(str(i))
    if not args['debug']:
        print(Mood.happy("Converting {} to webp".format(str(i))))
        Program.runprogram(cmdline)
    else:
        print()
        print(Mood.neutral("Command Line for {}:".format(i.name)))
        print(cmdline)

if not args['debug'] and not args['backup_dir'] and args['archive']:
    ABSWebPConvert.backuparchive(args['backup_archive'], args['files'], exepath=args['7z'], del_original=args['del_original'])
elif not args['debug'] and args['backup_dir']:
    for i in args['files']:
        ABSWebPConvert.backup(i, args['backup_dir'])
