#!/usr/bin/env ruby
require 'ostruct'
require 'optparse'
require 'pathname'
require 'fileutils'
require 'data_mapper'
require 'json'

require_relative 'andyrb/mood'
require_relative 'andyrb/util'
require_relative 'andyrb/videoinfo_dm'

class Options
  def self.parse(args)
    options = OpenStruct.new
    options.db = Pathname.new('./videoinfo.sqlite')
    options.gvi = true
    options.sort = true
    options.ffmpeg = false
    options.output = Pathname.getwd
    options.outputdb = nil
    options.backup = nil
    options.combine = false
    options.debug = false
    options.verbose = false
    options.config = '/home/evildarkarchon/.config/convertmkv.json'

    optparse = OptionParser.new do |opts|
      opts.on('--database file', 'Database to read metadata from (if any).') { |db| options.db = Pathname.new(db) }
      opts.on('-f', '--ffmpeg', 'Use ffmpeg instead of mkvmerge. Note: ffmpeg hates mpeg2-ps files.') { |f| options.ffmpeg = f }
      opts.on('-c', '--combine', 'Run in concatenation mode.') { |c| options.combine = c }
      opts.on('--no-sort', "Don't sort the list of files to be muxed.") { options.sort = false }
      opts.on('--no-gvi', "Don't generate video info for the muxed files.") { options.gvi = false }
      opts.on('-o directory', '--output directory', 'Directory where the muxed files will be located. (defaults to current directory)') { |dir| options.output = Pathname.new(dir) }
      opts.on('-b directory', '--backup directory', 'Directory where the source files will be moved.') { |dir| options.backup = Pathname.new(dir) }
      opts.on('--outputdb file', 'File name for the output videoinfo database (if any)') { |db| options.outputdb = Pathname.new(db) }
      opts.on('--debug', '-d', "Print what would be done, but don't actually do it") { |debug| options.debug = debug }
      opts.on('-v', '--verbose', 'Get a lot more chatty.') { |v| options.verbose = v }
      opts.on('--config file', 'Location of the configuration file') { |c| options.config = c }
    end
    optparse.parse!(args)
    options
  end
end

options = Options.parse(ARGV)
options.db = options.db.realpath if options.db.exist? && options.gvi == true
options.outputdb = options.output.join('videoinfo.sqlite') if options.outputdb.nil?
puts options.outputdb
FileUtils.touch(options.db.to_s) unless options.db.file?
FileUtils.touch(options.outputdb.to_s) if options.outputdb && !options.outputdb.file?
options.files = Util::SortEntries.sort(ARGV) if options.sort == true
options.files = ARGV unless options.sort == true

mkvpropedit = Util::FindApp.which('mkvpropedit')
ffmpeg = Util::FindApp.which('ffmpeg')
mkvmerge = Util::FindApp.which('mkvmerge')

config = nil
configfile = nil
configfile = File.open(options.config) if File.exist? options.config
config = JSON.parse(configfile.read) if configfile.respond_to?(:read)
configfile.close if confile.respond_to?(:close)

if ffmpeg.nil? && options.ffmpeg && !mkvmerge.nil?
  puts Mood.neutral('ffmpeg not found, using mkvmerge instead.')
  options.ffmpeg = false
end
if mkvmerge.nil? && !options.ffmpeg && !ffmpeg.nil?
  puts Mood.neutral('mkvmerge not found, using ffmpeg instead.')
  options.ffmpeg = true
end
raise 'Can not find mkvpropedit.' if mkvpropedit.nil? && options.ffmpeg
raise 'Can not find mkvmerge or ffmpeg.' if mkvmerge.nil? && ffmpeg.nil?

FileUtils.touch(options.db.to_s) unless options.db.file?
FileUtils.touch(options.outputdb.to_s) if options.outputdb && !options.outputdb.file?
DataMapper::Model.raise_on_save_failure = true
DataMapper.setup(:default, "sqlite:#{options.db.realpath}")
DataMapper.setup(:output, "sqlite:#{options.outputdb.realpath}") if options.outputdb
DataMapper::Logger.new($stdout, :debug) if options.debug || options.verbose
# db = DataMapper.repository(:default).adapter
vi = GenerateVideoInfo::Videoinfo.new
gvi = GenerateVideoInfo::Data.new(options.db.realpath, options.verbose) if options.gvi
DataMapper.finalize
begin
  DataMapper.auto_upgrade!
rescue DataObjects::SyntaxError
  DataMapper.auto_migrate!
end

flat = Class.new do
  define_method :genvi do |filename|
    filepath = Pathname.new(filename).realpath
    insert = GenerateVideoInfo::Videoinfo.new
    outhash = Util.hashfile(filepath.realpath.to_s)
    print "#{outhash}\n"
    puts Mood.happy("Extracting metadata from #{filepath}")
    DataMapper.repository(:output) do
      GenerateVideoInfo::Videoinfo.storage_names[:output] = 'videoinfo'
      GenerateVideoInfo::Videojson.storage_names[:output] = 'videojson'
      begin
        GenerateVideoInfo::Videoinfo.auto_upgrade!
        GenerateVideoInfo::Videojson.auto_upgrade!
      rescue DataObjects::SyntaxError
        GenerateVideoInfo::Videoinfo.auto_migrate!
        GenerateVideoInfo::Videojson.auto_migrate!
      end
    end
    jsondata = gvi.json(filename, options.debug) unless options.outputdb
    jsondata = DataMapper.repository(:output) { gvi.json(filename, options.debug, :output) } if options.outputdb
    GenerateVideoInfo.genhash(filename, jsondata, outhash) do |h|
      begin
        puts Mood.happy("Writing metadata for #{File.basename(filename)}")
        if !options.outputdb
          insert.attributes = h
          insert.save
        else
          DataMapper.repository(:output) do
            GenerateVideoInfo::Videoinfo.storage_names[:output] = 'videoinfo'
            insert.attributes = h
            insert.save
          end
        end
      rescue DataMapper::SaveFailureError
        insert.errors.each { |e| puts e } if options.verbose
      end
    end
  end

  define_method :ffmpegconcat do
    filelist = Tempfile.new('mkv', mode: 'a+')
    options.files.each do |file|
      query = GenerateVideoInfo::Videoinfo.all(filename: file, fields: [:duration_raw])
      dur = query[0][:duration_raw]
      dur = nil if dur.respond_to?(:empty?) && dur.empty?
      # dur = db.select('select duration_raw from videoinfo where filename = ?', file)[0] if db
      filelist.write("file '#{file}'\n")
      filelist.write("duration #{dur}\n") if dur
    end
    cmd = [ffmpeg, '-f', 'concat', '-safe', '0', '-i', filelist.path, '-c', 'copy', '-hide_banner', '-y', options.output.to_s]
    Util::Program.runprogram(cmd) unless options.debug
    Util::Program.runprogram([mkvpropedit, '--add-track-statistics-tags', options.output.to_s]) unless options.debug
    genvi(options.output.to_s) if options.gvi
    puts filelist.read if options.debug
  end

  define_method :mkvmergeconcat do
    basecommand = [mkvmerge, '-o', options.output.to_s]
    filelist = options.files.join(' + ')
    filelist = filelist.split
    command = basecommand + config['mkvmerge'] + filelist
    command.flatten!
    command.compact!
    Util::Program.runprogram(command) unless options.debug
    genvi(options.output.to_s) if options.gvi
  end

  define_method :backup do |filename|
    if !options.backup.nil? && options.backup.directory?
      puts Mood.happy("Moving #{filename} to #{options.backup}")
      FileUtils.mv(filename, options.backup.to_s) unless options.debug
      unless vi.nil? || options.debug
        vientry = GenerateVideoInfo::Videoinfo.all(filename: filename)
        vientry.destroy
      end
    end
  end
end

options.output.mkpath unless options.output.exist? || options.combine

if options.combine
  raise 'Output specified is not a file' if options.output.exist? && !options.output.file?
  flat.new.mkvmergeconcat unless options.ffmpeg && options.debug == false
  flat.new.ffmpegconcat if options.ffmpeg == true && options.debug == false
  options.files.each do |file|
    flat.new.backup(file)
  end
else
  raise 'Output specified is not a directory' unless options.output.directory?
  options.files.each do |file|
    filepath = Pathname.new(file)
    fileoutpath = options.output.join(filepath.sub_ext('.mkv').basename.to_s)
    puts Mood.happy("Muxing #{file} to a matroska file.")
    if options.ffmpeg
      longcmd = [ffmpeg, '-i', filepath.realpath.to_s, '-c', 'copy', '-f', 'matroska', '-hide_banner', '-y', fileoutpath.to_s]
      Util::Program.runprogram(longcmd) unless options.debug
      Util::Program.runprogram([mkvpropedit, '--add-track-statistics-tags', fileoutpath.to_s]) unless options.debug
    else
      command = [mkvmerge, config['mkvmerge'], '-o', fileoutpath.to_s, '=', file]
      command.flatten!
      command.compact!
      Util::Program.runprogram(command) unless options.debug
    end
    flat.new.genvi(fileoutpath.to_s) if options.gvi && fileoutpath.exist?
    flat.new.backup(file) if options.backup
  end
end
