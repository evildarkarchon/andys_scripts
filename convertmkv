#!/usr/bin/python3.5
import tempfile
import argparse
import pathlib
import shutil
import os

from andy.util import Color, Program, Util
from andy.videoinfo import VideoInfo, GenVideoInfo


colors = Color()
program = Program()
util = Util()

args = argparse.ArgumentParser()
args.add_argument("--ffmpeg", "-f", action="store_true", help="Use ffmpeg instead of mkvmerge. (Doesn't like mpeg-1 files)")
args.add_argument("--concat", "-c", dest="combine", action="store_true", help="Combine multiple files into one mkv file.")
args.add_argument("--output", "-o", help="Name of output file (for concatenation mode) or directory (for normal mode).")
args.add_argument("--no-sort", "-ns", action="store_true", help="Do not sort the file names to be used for the file list.")
args.add_argument("--database", "-d", help="Location of video info database.")
args.add_argument("--output-database", "-od", help="Location of the output videoinfo database (defaults to the output directory)")
args.add_argument("--backup", "-b", help="Location to move the original file.")
args.add_argument("--no-gvi", "-ng", help="Disable video information generation if a database is found/specified.")
args.add_argument("files", nargs="*", help="Files to be muxed.")

options = vars(args.parse_args())

if not options["files"]:
    print("{} No files specified.".format(colors.mood("sad")))
    raise ValueError

if options["no_sort"]:
    filelist = options["files"]
else:
    filelist = util.sortentries(options["files"])

options["ffmpegdisable"] = False  # These are for extreme circumstances, reason for disabling goes in the variable.
options["mkvmergedisable"] = False

mkvpropedit = shutil.which("mkvpropedit", mode=os.X_OK)
ffmpeg = shutil.which("ffmpeg", mode=os.X_OK)
mkvmerge = shutil.which("mkvmerge", mode=os.X_OK)

peshow = True

if not options["output"] and not options["combine"]:
    options["output"] = str(pathlib.Path.cwd())

if not options["output"] == str(pathlib.Path.cwd()) and not pathlib.Path(options["output"]).is_dir():
    if util.is_python_version((3, 5, 0)):
        pathlib.Path(options["output"]).mkdir(parents=True, exist_ok=True)
    else:
        pathlib.Path(options["output"]).mkdir(parents=True)

if options["database"] and pathlib.Path(options["database"]).exists():
    vi = VideoInfo(options["database"])
    if not options["no_gvi"]:
        gvi = GenVideoInfo(options["database"])
    else:
        gvi = None
elif pathlib.Path.cwd().joinpath("videoinfo.sqlite").exists():
    vi = VideoInfo(str(pathlib.Path.cwd().joinpath("videoinfo.sqlite")))
    if not options["no_gvi"]:
        gvi = GenVideoInfo(str(pathlib.Path.cwd().joinpath("videoinfo.sqlite")))
    else:
        gvi = None
    options["database"] = str(pathlib.Path.cwd().joinpath("videoinfo.sqlite"))
else:
    vi = None
    gvi = None


def genvi(videoname):
    outpath = pathlib.Path(options["output"])
    outdbpath = pathlib.Path(options["output_database"])
    dbpath = pathlib.Path(options["database"])
    if options["output_database"] and outdbpath.is_file():
        ogvi = GenVideoInfo(options["output_database"])
    elif not options["combine"] and options["output"] and not options["output_database"] and\
            str(dbpath.parent) != options["output"] and options["output"] != str(pathlib.Path.cwd()):
                ogvi = GenVideoInfo(str(outpath.joinpath("videoinfo.sqlite")))
    elif options["combine"] and outpath.parent.is_dir() and\
            str(outpath.parent) != str(pathlib.Path.cwd()):
                ogvi = GenVideoInfo(outpath.parent.joinpath("videoinfo.sqlite"))
    else:
        ogvi = None

    filepath = pathlib.Path(videoname)
    print("{} Calculating hash for videoname for {}".format(colors.mood("happy"), filepath.name))
    outhash = util.hashfile(videoname)
    if ogvi:
        jsondump = ogvi.gvigenjson(videoname)
        ogvi.write(ogvi.generate(videoname, jsondump, outhash))
    elif gvi and not ogvi:
        jsondump = gvi.gvigenjson(videoname)
        gvi.write(gvi.generate(videoname, jsondump, outhash))


def backup(videoname):
    if options["backup"] and pathlib.Path(options["backup"]).is_dir():
        print("{} Moving {} to {}".format(colors.mood("happy"), videoname, options["backup"]))
        shutil.move(videoname, options["backup"])
        if vi:
            print("{} Removing original file metadata from the videoinfo database.".format(colors.mood("happy")))
            entry = vi.queryvideoinfosr('select filename from videoinfo where filename = ?', videoname)
            if entry:
                vi.deletefileentry(videoname)


def ffmpegconcat():
    with tempfile.NamedTemporaryFile("a+") as mkvlist:
        for filename in filelist:
            mkvlist.write("file '{}'\n".format(str(pathlib.Path(filename).resolve())))
            if vi:
                dur = vi.queryvideoinfosr('select duration_raw from videoinfo where filename = ?', filename)
                if dur:
                    mkvlist.write("duration {}\n".format(dur[0]))
            mkvlist.flush()
        """mkvlist.seek(0)
        print(mkvlist.read())
        mkvlist.seek(0)"""
        if ffmpeg:
            program.runprogram([ffmpeg, "-f", "concat", '-safe', '0', "-i", mkvlist.name, "-c", "copy", "-hide_banner", "-y", options["output"]])
        else:
            print("{} ffmpeg not found.".format(colors.mood("sad")))
            raise FileNotFoundError
        if mkvpropedit:
            print("{} Adding track statistics metadata to {}".format(colors.mood("happy"), options["output"]))
            program.runprogram([mkvpropedit, '--add-track-statistics-tags', options["output"]])
        else:
            if peshow is True:
                print("{} mkvpropedit not found, not adding statistics tags.".format(colors.mood("neutral")))
                peshow = False
        if gvi:
            genvi(options["output"])


def mkvmergeconcat():
    def mkvconcat():
        basecommand = [mkvmerge, "-o", options["output"]]
        concatfilelist = ' + '.join(filelist).split()
        """newlist=str(start)
        newnewlist=newlist.split()"""
        return basecommand + concatfilelist
    if mkvmerge:
        """command=concatlist()"""
        """print(command)"""
        program.runprogram(mkvconcat())
    else:
        print("{} mkvmerge not found.".format(colors.mood("sad")))
        raise FileNotFoundError
    if gvi:
        genvi(options["output"])

if options["combine"]:
    if not options["output"]:
        print("{} Output file name has not been specified.".format(colors.mood("sad")))
        raise ValueError
    print("{} Combining files into {}".format(colors.mood("happy"), options["output"]))
    if options["ffmpeg"]:
        if options["ffmpegdisable"]:
            print("{} {}, running mkvmerge instead.".format(colors.mood("neutral"), options["ffmpegdisable"]))
            mkvmergeconcat()
        else:
            ffmpegconcat()
    else:
        if options["mkvmergedisable"]:
            print("{} {}, running ffmpeg instead.".format(colors.mood("neutral"), options["mkvmergedisable"]))
            ffmpegconcat()
        else:
            mkvmergeconcat()

    if options["backup"]:
        for filename in filelist:
            backup(filename)

else:
    for filename in filelist:
        filepath = pathlib.Path(filename)
        if options["output"] and pathlib.Path(options["output"]).is_dir():
            outdir = pathlib.Path(options["output"]).resolve()
        else:
            outdir = pathlib.Path.cwd()
        fileoutpath = outdir.joinpath(filepath.with_suffix(".mkv").name)
        fileoutname = str(fileoutpath)
        print("{} Muxing {} into a matroska file.".format(colors.mood("happy"), filename))
        if filepath.exists():
            if options["ffmpeg"]:
                if ffmpeg:
                    program.runprogram([ffmpeg, "-i", filename, "-c", "copy", "-f", "matroska", '-hide_banner', '-y', fileoutname])
                else:
                    print("{} ffmpeg not found.".format(colors.mood("sad")))
                    raise FileNotFoundError

                if mkvpropedit:
                    print("{} Adding track statistics to {}".format(colors.mood("happy"), fileoutname))
                    program.runprogram([mkvpropedit, "--add-track-statistics-tags", fileoutname])
                else:
                    if peshow is True:
                        print("{} mkvpropedit not found, not adding statistics tags.".format(colors.mood("neutral")))
                        peshow = False
            else:
                if mkvmerge:
                    program.runprogram([mkvmerge, "-o", fileoutname, "=", filename])
                else:
                    print("{} mkvmerge not found.".format(colors.mood("sad")))
                    raise FileNotFoundError
            if gvi:
                genvi(fileoutname)
            if options["backup"]:
                backup(filename)
