#!/usr/bin/python3.5
import tempfile
import argparse
import pathlib
import sqlite3
import shutil
import os

from andy.runprogram import runprogram
from andy.colors import Color
from andy.sortentries import sortentries
from andy.flatten import flatten

colors=Color()

args=argparse.ArgumentParser()
args.add_argument("--ffmpeg", "-f", action="store_true", help="Use ffmpeg instead of mkvmerge. (Doesn't like mpeg-1 files)")
args.add_argument("--concat", "-c", dest="combine", action="store_true", help="Combine multiple files into one mkv file.")
args.add_argument("--output", "-o", help="Name of output file (for concatenation mode only).")
args.add_argument("--no-sort", "-ns", action="store_true", help="Do not sort the file names to be used for the file list.")
args.add_argument("--database", "-d", help="Location of video info database. (only used in concatenation mode if ffmpeg is used as the concatenator)")
args.add_argument("files", nargs="*", help="Files to be muxed.")

options=vars(args.parse_args())

if not options["files"]:
    print("{} No files specified.".format(colors.mood("sad")))
    raise ValueError

if options["no_sort"]:
    filelist=options["files"]
else:
    filelist=sortentries(options["files"])

options["ffmpegdisable"]=False #These are for extreme circumstances
options["mkvmergedisable"]=False

mkvpropedit=shutil.which("mkvpropedit", mode=os.X_OK)
ffmpeg=shutil.which("ffmpeg", mode=os.X_OK)
mkvmerge=shutil.which("mkvmerge", mode=os.X_OK)

if options["ffmpeg"] and options["combine"]:
    try:
        if options["database"]:
            database=sqlite3.connect(options["database"])
        else:
            database=sqlite3.connect(str(pathlib.Path.cwd().joinpath("videoinfo.sqlite")))
    except sqlite3.OperationalError:
        print("{} No videoinfo database found, will not add duration info to ffconcat file.".format(colors.mood("neutral")))
        database=None
        pass
def ffmpegconcat():
    with tempfile.NamedTemporaryFile("a+") as mkvlist:
        for filename in filelist:
            mkvlist.write("file '{}'\n".format(str(pathlib.Path(filename).resolve())))
            if database:
                with database:
                    db=database.cursor()
                    db.execute('select duration_raw from videoinfo where filename = ?', (filename,))
                    dur=db.fetchone()
                    if dur:
                        mkvlist.write("duration {}\n".format(dur[0]))
            mkvlist.flush()
        """mkvlist.seek(0)
        print(mkvlist.read())
        mkvlist.seek(0)"""
        if ffmpeg:
            runprogram([ffmpeg, "-f", "concat", '-safe', '0', "-i", mkvlist.name, "-c", "copy", "-hide_banner", "-y", options["output"]])
        else:
            print("{} ffmpeg not found.".format(colors.mood("sad")))
            raise FileNotFoundError
        if mkvpropedit:
            runprogram([mkvpropedit, '--add-track-statistics-tags', options["output"]])
    """print("{} ffmpeg code is temporarily disabled until I figure out why the file list isn't working.".format(colors.mood("neutral")))"""
    if database:
        database.close()
def mkvmergeconcat():
    if mkvmerge:
        start=" + ".join(filelist)
        newlist=str(start)
        newnewlist=newlist.split()
        basecommand=[mkvmerge, "-o", options["output"], newnewlist]
        command=list(flatten(basecommand))
        """print(command)"""
        runprogram(command)
    else:
        print("{} mkvmerge not found.".format(colors.mood("sad")))
        raise FileNotFoundError

if options["combine"]:
    if not options["output"]:
        print("{} Output file name has not been specified.".format(colors.mood("sad")))
        raise ValueError
    print("{} Combining files into {}".format(colors.mood("happy"), options["output"]))
    if options["ffmpeg"]:
        if options["ffmpegdisable"]:
            print("{} {}, running mkvmerge instead.".format(colors.mood("neutral"), options["ffmpegdisable"]))
            mkvmergeconcat()
        else:
            ffmpegconcat()
    else:
        if options["mkvmergedisable"]:
            print("{} {}, running ffmpeg instead.".format(colors.mood("neutral"), options["mkvmergedisable"]))
            ffmpegconcat()
        else:
            mkvmergeconcat()

else:
    for filename in filelist:
        filepath=pathlib.Path(filename)
        print("{} Muxing {} into a matroska file.".format(colors.mood("happy"), filename))
        if filepath.exists():
            if options["ffmpeg"]:
                if ffmpeg:
                    runprogram([ffmpeg, "-i", filename, "-c", "copy", "-f", "matroska", '-hide_banner', '-y', str(filepath.with_suffix(".mkv"))])
                else:
                    print("{} ffmpeg not found.".format(colors.mood("sad")))
                    raise FileNotFoundError

                if mkvpropedit:
                    runprogram([mkvpropedit, "--add-track-statistics-tags", str(filepath.with_suffix(".mkv"))])
            else:
                if mkvmerge:
                    runprogram([mkvmerge, "-o", str(filepath.with_suffix(".mkv")), "=", filename])
                else:
                    print("{} mkvmerge not found.".format(colors.mood("sad")))
                    raise FileNotFoundError
