#!/usr/bin/env ruby
require 'ostruct'
require 'optparse'
require 'pathname'
require 'fileutils'
require 'data_mapper'
require 'json'

require_relative 'andyrb/mood'
require_relative 'andyrb/util/sort'
require_relative 'andyrb/util/program'
require_relative 'andyrb/util/recursive_symbolize_keys'
require_relative 'andyrb/util/findapp'
require_relative 'andyrb/videoinfo/database'
require_relative 'andyrb/videoinfo/genhash'
require_relative 'andyrb/core/cleanup'

class Options
  def self.parse(args)
    options = OpenStruct.new
    options.db = nil
    options.gvi = false
    options.sort = true
    options.ffmpeg = false
    options.output = Pathname.getwd
    options.outputdb = nil
    options.backup = nil
    options.combine = false
    options.debug = false
    options.verbose = false
    options.audio = false
    options.config = '/home/evildarkarchon/.config/convertmkv.json'

    optparse = OptionParser.new do |opts|
      opts.on('--database file', 'Database to read metadata from (if any).') { |db| options.db = Pathname.new(db) }
      opts.on('-f', '--ffmpeg', 'Use ffmpeg instead of mkvmerge. Note: ffmpeg hates mpeg2-ps files.') { |f| options.ffmpeg = f }
      opts.on('-c', '--combine', 'Run in concatenation mode.') { |c| options.combine = c }
      opts.on('--no-sort', "Don't sort the list of files to be muxed.") { options.sort = false }
      opts.on('--gvi', 'Generate video info for the muxed files.') { options.gvi = true }
      opts.on('-o directory', '--output directory', 'Directory where the muxed files will be located. (defaults to current directory)') { |dir| options.output = Pathname.new(dir) }
      opts.on('-b directory', '--backup directory', 'Directory where the source files will be moved.') { |dir| options.backup = Pathname.new(dir) }
      opts.on('--outputdb file', 'File name for the output videoinfo database (if any)') { |db| options.outputdb = Pathname.new(db) }
      opts.on('--debug', '-d', "Print what would be done, but don't actually do it") { |debug| options.debug = debug }
      opts.on('-v', '--verbose', 'Get a lot more chatty.') { |v| options.verbose = v }
      opts.on('--config file', 'Location of the configuration file') { |c| options.config = c }
      opts.on('--audio', '-a', 'Input files are audio files.') { options.audio = true }
    end
    optparse.parse!(args)
    options
  end
end

Args = Options.parse(ARGV)
Args.db = Args.db.realpath if Args.db.exist?
Args.outputdb =
  case
  when Args.outputdb.nil? && Args.output.directory?, Args.outputdb.nil? && !Args.output.exist?, Args.outputdb && Args.outputdb == Args.output + 'videoinfo.sqlite' && !Args.output.parent.directory && Args.combine
    Args.db
  when Args.outputdb.nil? && !Args.output.directory? && !Args.combine
    Args.output + 'videoinfo.sqlite'
  end

FileUtils.touch(Args.db.to_s) unless Args.db.file?
FileUtils.touch(Args.outputdb.to_s) if Args.outputdb && !Args.outputdb.parent.directory? && !Args.outputdb.file?

Args.files = ARGV
Args.files.cleanup!
Args.files.keep_if { |filename| File.file?(filename) }
Args.files = Util.sort(Args.files) if Args.sort
# print "#{Args.files}\n"

MkvPropEdit = Util::FindApp.which('mkvpropedit')
FFMPEG = Util::FindApp.which('ffmpeg')
MkvMerge = Util::FindApp.which('mkvmerge')

puts Mood.neutral 'ffmpeg concatenation mode has been disabled for the time being, reverting to mkvmerge.' if Args.combine && Args.ffmpeg
Args.ffmpeg = false if Args.combine

Config =
  case
  when File.exist?(Args.config)
    configfile = File.open(Args.config)
    config = JSON.parse(configfile.read)
    config = Util.recursive_symbolize_keys(config)
    configfile.close
    print "#{config}\n" if Args.debug && config
    config
  end

case
when !FFMPEG && Args.ffmpeg && MkvMerge, FFMPEG && !File.executable?(FFMPEG) && MkvMerge && File.executable?(MkvMerge)
  puts Mood.neutral('ffmpeg not found or is not executable, using mkvmerge instead.')
  Args.ffmpeg = false
when !MkvMerge && !Args.ffmpeg && !FFMPEG.nil?, FFMPEG && File.executable?(FFMPEG) && MkvMerge && !File.executable?(MkvMerge)
  puts Mood.neutral('mkvmerge not found or is not executable, using ffmpeg instead.')
  Args.ffmpeg = true
else
  raise "Could not find either ffmpeg or mkvmerge (or they weren't executable)"
end
raise 'Can not find mkvmerge or it is not executable' unless (MkvMerge && File.executable?(MkvMerge)) || Args.ffmpeg
raise 'Can not find ffmpeg or it is not executable' if (Args.ffmpeg && !FFMPEG) || (Args.ffmpeg && FFMPEG && !File.executable?(FFMPEG))
raise 'Can not find mkvpropedit or it is not executable' unless MkvPropEdit && File.executable?(MkvPropEdit)

if Args.db
  DataMapper::Model.raise_on_save_failure = true
  DataMapper.setup(:default, "sqlite:#{Args.db.realpath}")
  DataMapper.setup(:output, "sqlite:#{Args.outputdb.realpath}") if Args.outputdb
  DataMapper::Logger.new($stdout, :debug) # if Args.debug || Args.verbose
  # db = DataMapper.repository(:default).adapter
  VI = VideoInfo::Database::Videoinfo.new
  GVI = VideoInfo::Database::Data.new(Args.db.realpath, Args.verbose) if Args.gvi
  DataMapper.finalize
  begin
    DataMapper.auto_upgrade!
  rescue DataObjects::SyntaxError
    DataMapper.auto_migrate!
  end
end

VI = nil unless Args.db
GVI = nil unless Args.gvi

class Convenience
  def initialize(filename)
    @filename = filename
  end

  def genvi
    filepath = Pathname.new(@filename).realpath
    insert = VideoInfo::Database::Videoinfo.new
    outhash = Util.hashfile(filepath.realpath.to_s)
    print "#{outhash}\n"
    puts Mood.happy("Extracting metadata from #{filepath}")
    if Args.outputdb
      DataMapper.repository(:output) do
        VideoInfo::Database::Videoinfo.storage_names[:output] = 'videoinfo'
        VideoInfo::Database::Videojson.storage_names[:output] = 'videojson'
        begin
          VideoInfo::Database::Videoinfo.auto_upgrade!
          VideoInfo::Database::Videojson.auto_upgrade!
        rescue DataObjects::SyntaxError
          VideoInfo::Database::Videoinfo.auto_migrate!
          VideoInfo::Database::Videojson.auto_migrate!
        end
      end
    end

    jsondata =
      case
      when !Args.outputdb
        GVI.json(@filename, Args.debug)
      when Args.outputdb
        DataMapper.repository(:output) { GVI.json(@filename, Args.debug, :output) }
      end

    VideoInfo.genhash(@filename, jsondata, outhash) do |h|
      begin
        puts Mood.happy("Writing metadata for #{File.basename(@filename)}")
        if !Args.outputdb
          insert.attributes = h
          insert.save
        else
          DataMapper.repository(:output) do
            VideoInfo::Database::Videoinfo.storage_names[:output] = 'videoinfo'
            insert.attributes = h
            insert.save
          end
        end
      rescue DataMapper::SaveFailureError
        insert.errors.each { |e| puts e } if Args.verbose
      end
    end
  end

  def self.mkvmergeconcat
    basecommand = %W(#{MkvMerge} -o #{Args.output})
    filelist = Args.files.join(' + ')
    filelist = filelist.split
    command = basecommand + Config[:mkvmerge] + filelist
    command.flatten!
    command.compact!
    Util::Program.runprogram(command) unless Args.debug
    genvi(Args.output.to_s) if Args.gvi
  end

  def backup
    case
    when !Args.backup.nil? && Args.backup.directory?
      puts Mood.happy("Moving #{@filename} to #{Args.backup}")
      FileUtils.mv(@filename, Args.backup.to_s) unless Args.debug
    end
    case
    when Args.db && !Vi.nil? && !Args.debug
      vientry = VideoInfo::Database::Videoinfo.all(filename: @filename)
      vientry.destroy
    end
  end
end

Args.output.mkpath unless Args.output.exist? || Args.combine

if Args.combine
  raise 'Output specified is not a file' if Args.output.exist? && !Args.output.file?
  Convenience.mkvmergeconcat unless Args.ffmpeg && Args.debug == false
  Args.files.each do |file|
    convenience = Convenience.new(file)
    convenience.backup
  end
else
  raise 'Output specified is not a directory' unless Args.output.directory?
  Args.files.each do |file|
    convenience = Convenience.new(file)
    filepath = Pathname.new(file)
    fileoutpath =
      case
      when Args.audio
        Args.output + filepath.sub_ext('.mka').basename
      else
        Args.output + filepath.sub_ext('.mkv').basename
      end

    puts Mood.happy("Muxing #{file} to a matroska file.")
    if Args.ffmpeg
      ffcmd = %W(#{FFMPEG} -i #{filepath.realpath} -c copy -f matroska -hide_banner -y #{fileoutpath})
      ffcmd.flatten!
      ffcmd.compact!

      mpecmd = %W(#{MkvPropEdit} --add-track-statistics-tags #{fileoutpath})
      mpecmd.flatten!
      mpecmd.compact!
      case
      when !Args.debug
        Util::Program.runprogram(ffcmd)
        Util::Program.runprogram(mpecmd)
      end
    else
      command = %W(#{MkvMerge} #{Config[:mkvmerge]} -o #{fileoutpath} = #{file})
      command.flatten!
      command.compact!
      Util::Program.runprogram(command) unless Args.debug
    end
    convenience.genvi if Args.gvi && fileoutpath.exist?
    convenience.backup if Args.backup
  end
end
