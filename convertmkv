#!/usr/bin/env python3.5
import tempfile
import argparse
import pathlib
import shutil
import os

from andy.util import Mood, Program, Util
from andy.videoinfo import VideoInfo, GenVideoInfo

args = argparse.ArgumentParser()
args.add_argument("--ffmpeg", "-f", action="store_true", help="Use ffmpeg instead of mkvmerge. (Doesn't like mpeg-1 files)")
args.add_argument("--concat", "-c", dest="combine", action="store_true", help="Combine multiple files into one mkv file.")
args.add_argument("--output", "-o", help="Name of output file (for concatenation mode) or directory (for normal mode).")
args.add_argument("--no-sort", "-ns", action="store_true", help="Do not sort the file names to be used for the file list.")
args.add_argument("--database", "-d", help="Location of video info database.")
args.add_argument("--output-database", "-od", help="Location of the output videoinfo database (defaults to the output directory)")
args.add_argument("--backup", "-b", help="Location to move the original file.")
args.add_argument("--no-gvi", "-ng", help="Disable video information generation if a database is found/specified.")
args.add_argument("files", nargs="*", help="Files to be muxed.")

options = vars(args.parse_args())

if not options["files"]:
    print("{} No files specified.".format(Mood.sad()))
    raise ValueError

if options["no_sort"]:
    filelist = options["files"]
else:
    filelist = Util.sortentries(options["files"])

options["ffmpegdisable"] = False  # These are for extreme circumstances, reason for disabling goes in the variable.
options["mkvmergedisable"] = False

mkvpropedit = shutil.which("mkvpropedit", mode=os.X_OK)
ffmpeg = shutil.which("ffmpeg", mode=os.X_OK)
mkvmerge = shutil.which("mkvmerge", mode=os.X_OK)

pe = False

if not options["output"] and not options["combine"]:
    options["output"] = str(pathlib.Path.cwd())

if not options["output"] == str(pathlib.Path.cwd()) and not pathlib.Path(options["output"]).is_dir():
    if Util.is_python_version((3, 5, 0)):
        pathlib.Path(options["output"]).mkdir(parents=True, exist_ok=True)
    else:
        pathlib.Path(options["output"]).mkdir(parents=True)

if options["database"] and pathlib.Path(options["database"]).exists():
    vi = VideoInfo(options["database"])
    if not options["no_gvi"]:
        gvi = GenVideoInfo(options["database"])
    else:
        gvi = None
elif pathlib.Path.cwd().joinpath("videoinfo.sqlite").exists():
    vi = VideoInfo.cwd()
    if not options["no_gvi"]:
        gvi = GenVideoInfo.cwd()
    else:
        gvi = None
    options["database"] = str(pathlib.Path.cwd().joinpath("videoinfo.sqlite"))
else:
    vi = None
    gvi = None


def genvi(videoname):
    """Frontend function for all videoinfo generation for this script.
    If the destination directory is the current directory, it will use the database in the current directory.
    Otherwise, it will use the database (or create a new one, built-in feature of sqlite3 module) in the destination directory.

    videoname is a string with the filename of the newly muxed file."""

    outpath = pathlib.Path(options["output"])
    outdbpath = pathlib.Path(options["output_database"])
    dbpath = pathlib.Path(options["database"])
    if options["output_database"] and outdbpath.is_file():
        ogvi = GenVideoInfo(options["output_database"])
    elif not options["combine"] and options["output"] and not options["output_database"] and\
            str(dbpath.parent) != options["output"] and options["output"] != str(pathlib.Path.cwd()):
        ogvi = GenVideoInfo(str(outpath.joinpath("videoinfo.sqlite")))
    elif options["combine"] and outpath.parent.is_dir() and\
            str(outpath.parent) != str(pathlib.Path.cwd()):
        ogvi = GenVideoInfo(outpath.parent.joinpath("videoinfo.sqlite"))
    else:
        ogvi = None

    filepath = pathlib.Path(videoname)
    print("{} Calculating hash for videoname for {}".format(Mood.happy(), filepath.name))
    outhash = Util.hashfile(videoname)
    if ogvi:
        ogvi.write(ogvi.generate(videoname, ogvi.gvigenjson(videoname), outhash))
    elif gvi and not ogvi:
        gvi.write(gvi.generate(videoname, gvi.gvigenjson(videoname), outhash))


def backup(videoname):
    """Worker function that performs any requested backup operations.

    videoname is a string with the filename of the source file."""

    if options["backup"] and pathlib.Path(options["backup"]).is_dir():
        print("{} Moving {} to {}".format(Mood.happy(), videoname, options["backup"]))
        shutil.move(videoname, options["backup"])
        if vi:
            print("{} Removing original file metadata from the videoinfo database.".format(Mood.happy()))
            entry = vi.queryvideoinfo('select filename from videoinfo where filename = ?', videoname)
            if entry:
                vi.deletefileentry(videoname)


def ffmpegconcat():
    """Worker function that performs concatenation using ffmpeg.
    Because ffmpeg requires a file list and I am not aware of a way to do this using stdin.
    A temporary file is created and the file name of the source file as well as the duration from the duration_raw column of the videoinfo database if one is available.
    This will also invoke mkvpropedit if its installed and add track statistics tags so tools like genvideoinfo can get bitrate data."""

    with tempfile.NamedTemporaryFile("a+") as mkvlist:
        for filename in filelist:
            mkvlist.write("file '{}'\n".format(str(pathlib.Path(filename).resolve())))
            if vi:
                dur = vi.queryvideoinfo('select duration_raw from videoinfo where filename = ?', filename)
                if dur:
                    mkvlist.write("duration {}\n".format(dur[0]))
            mkvlist.flush()

        if ffmpeg:
            Program.runprogram([ffmpeg, "-f", "concat", '-safe', '0', "-i", mkvlist.name, "-c", "copy", "-hide_banner", "-y", options["output"]])
        else:
            print("{} ffmpeg not found.".format(Mood.sad()))
            raise FileNotFoundError
        if mkvpropedit:
            print("{} Adding track statistics metadata to {}".format(Mood.happy(), options["output"]))
            Program.runprogram([mkvpropedit, '--add-track-statistics-tags', options["output"]])
        else:
            if not pe:
                print("{} mkvpropedit not found, not adding statistics tags.".format(Mood.neutral()))
                pe = True
        if gvi:
            genvi(options["output"])


def mkvmergeconcat():
    """Worker function to perform concatenation using mkvmerge."""

    def mkvconcat():
        basecommand = [mkvmerge, "-o", options["output"]]
        concatfilelist = ' + '.join(filelist).split()
        return basecommand + concatfilelist
    if mkvmerge:
        Program.runprogram(mkvconcat())
    else:
        print("{} mkvmerge not found.".format(Mood.sad()))
        raise FileNotFoundError
    if gvi:
        genvi(options["output"])

if options["combine"]:
    if not options["output"]:
        print("{} Output file name has not been specified.".format(Mood.sad()))
        raise ValueError
    print("{} Combining files into {}".format(Mood.happy(), options["output"]))
    if options["ffmpeg"]:
        if options["ffmpegdisable"]:
            print("{} {}, running mkvmerge instead.".format(Mood.neutral(), options["ffmpegdisable"]))
            mkvmergeconcat()
        else:
            ffmpegconcat()
    else:
        if options["mkvmergedisable"]:
            print("{} {}, running ffmpeg instead.".format(Mood.neutral(), options["mkvmergedisable"]))
            ffmpegconcat()
        else:
            mkvmergeconcat()

    if options["backup"]:
        for filename in filelist:
            backup(filename)

else:
    for filename in filelist:
        filepath = pathlib.Path(filename)
        if options["output"] and pathlib.Path(options["output"]).is_dir():
            outdir = pathlib.Path(options["output"]).resolve()
        else:
            outdir = pathlib.Path.cwd()
        fileoutpath = outdir.joinpath(filepath.with_suffix(".mkv").name)
        fileoutname = str(fileoutpath)
        print("{} Muxing {} into a matroska file.".format(Mood.happy(), filename))
        if filepath.exists():
            if options["ffmpeg"]:
                if ffmpeg:
                    Program.runprogram([ffmpeg, "-i", filename, "-c", "copy", "-f", "matroska", '-hide_banner', '-y', fileoutname])
                else:
                    print("{} ffmpeg not found.".format(Mood.sad()))
                    raise FileNotFoundError

                if mkvpropedit:
                    print("{} Adding track statistics to {}".format(Mood.happy(), fileoutname))
                    Program.runprogram([mkvpropedit, "--add-track-statistics-tags", fileoutname])
                else:
                    if not pe:
                        print("{} mkvpropedit not found, not adding statistics tags.".format(Mood.neutral()))
                        pe = True
            else:
                if mkvmerge:
                    Program.runprogram([mkvmerge, "-o", fileoutname, "=", filename])
                else:
                    print("{} mkvmerge not found.".format(Mood.sad()))
                    raise FileNotFoundError
            if gvi:
                genvi(fileoutname)
            if options["backup"]:
                backup(filename)
