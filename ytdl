#!/usr/bin/env ruby
# frozen_string_literal: true

# require 'optparse'
require 'pathname'
require 'uri'
require 'fileutils'
begin
  require 'power_p'
rescue LoadError
  nil
end

require_relative 'andyrb/ytdl'
require_relative 'andyrb/convertmkv/mux'
require_relative 'andyrb/core/cleanup'
require_relative 'andyrb/core/monkeypatch'

AndyCore.monkeypatch(Array, AndyCore::Array::Cleanup)

opts = YTDL::Options.new(ARGV.dup.cleanup)
opts.parse_args!
opts.parse_urls!

ytdl = YTDL::Fetch.new(opts[:directory], opts.urls, sort: opts[:sort], pretend: opts[:pretend], subdirectory: opts[:subdirectory], datesubdir: opts[:datesubdir], nodownload: opts[:no_download])
ytdl.fetch_videos(webmout: opts[:webm], force: opts[:force], keep_split: opts[:keep_split], ffmpegdl: opts[:ffmpegdl])

files = YTDL.findfiles(ytdl.directory, sort: opts[:sort], pretend: opts[:pretend])

if opts[:test_download]
  ytdl.filenames.each do |i|
    puts Mood.neutral("Removing #{i}") if File.exist?(i)
    FileUtils.rm(i) if File.exist?(i)
  end
end

playlistpath =
  case
  when opts[:playlistpath]
    opts[:playlistpath]
  when ytdl.directory.to_s.include?('/data/Videos/Youtube')
    pldir = '/data/Videos/Youtube/Playlists'
    opts[:subdirectory] ? Pathname.new("#{pldir}/#{opts[:subdirectory]}/#{ytdl.date}.xspf") : Pathname.new("#{pldir}/#{ytdl.date}.xspf")
    pldir = nil
  else
    Pathname.new("#{ytdl.directory}/Playlists/#{ytdl.date}.xspf")
  end
puts Mood.neutral('Playlist Path:') if opts[:pretend]
p playlistpath if opts[:pretend]
root = ytdl.directory.to_s.include?('/data/Videos') ? '/data/Videos' : ytdl.directory.parent.to_s

if opts[:stats]
  stats = YTDL::Stats.new(files, pretend: opts[:pretend])
  stats.genstatsfl!
  stats.genstats
end

if opts[:mux]
  muxfiles = files.dup.delete_if { |i| i.extname == '.mka' || i.extname == '.mkv' }
  mux = ConvertMkv::Mux.new(muxfiles, ytdl.directory)
  mux.mkvmerge unless opts[:ffmpegmux]
  mux.ffmpeg if opts[:ffmpegmux]
end

plfilenames = ytdl.filenames.respond_to?(:empty?) && ytdl.filenames.empty? && !opts[:no_download] ? files : ytdl.filepaths

pl = YTDL::Playlist.new(plfilenames, playlistpath.to_s, ytdl.directory, root, resetplaylist: opts[:resetplaylist], pretend: opts[:pretend], noblacklist: opts[:no_blacklist])
pl.blacklist unless opts[:playlist]
pl.genplfilelist! if opts[:playlist]

begin
  pl.genplaylist(opts[:drive_letter]) if [opts[:playlist], opts[:drive_letter], !ytdl.directory.to_s.include?('/data/Videos/Youtube')].all?
  pl.genplaylist if [opts[:playlist], ytdl.directory.to_s.include?('/data/Videos/Youtube')].all?
rescue Interrupt => e
  raise e
else
  pl.blacklist if opts[:playlist]
end
