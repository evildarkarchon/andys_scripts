#!/usr/bin/env ruby
# frozen_string_literal: true

# require 'optparse'
require 'pathname'
require 'uri'
require 'fileutils'
begin
  require 'power_p'
rescue LoadError
  nil
end

require_relative 'andyrb/ytdl'
require_relative 'andyrb/convertmkv/mux'
require_relative 'andyrb/core/cleanup'
require_relative 'andyrb/core/monkeypatch'

AndyCore.monkeypatch(Array, AndyCore::Array::Cleanup)

Opts = YTDL::YtOptions.new(ARGV.dup.cleanup)
Opts.parse_args!
Opts.parse_urls!

YtDl = YTDL::Fetch.new(Opts[:args][:directory], Opts[:urls], sort: Opts[:args][:sort], pretend: Opts[:args][:pretend], subdirectory: Opts[:args][:subdirectory], datesubdir: Opts[:args][:datesubdir], nodownload: Opts[:args][:no_download])
YtDl.fetch_videos(webmout: Opts[:args][:webm], force: Opts[:args][:force], keep_split: Opts[:args][:keep_split], ffmpegdl: Opts[:args][:ffmpegdl])

Files = YTDL.findfiles(YtDl.directory, sort: Opts[:args][:sort], pretend: Opts[:args][:pretend])

if Opts[:args][:test_download]
  YtDl.filenames.each do |i|
    puts Mood.neutral("Removing #{i}") if File.exist?(i)
    FileUtils.rm(i) if File.exist?(i)
  end
end

playlistpath =
  case
  when Opts[:args][:playlistpath]
    Opts[:args][:playlistpath]
  when YtDl.directory.to_s.include?('/data/Videos/Youtube')
    pldir = '/data/Videos/Youtube/Playlists'
    Opts[:args][:subdirectory] ? Pathname.new("#{pldir}/#{Opts[:args][:subdirectory]}/#{YtDl.date}.xspf") : Pathname.new("#{pldir}/#{YtDl.date}.xspf")
    pldir = nil
  else
    Pathname.new("#{YtDl.directory}/Playlists/#{YtDl.date}.xspf")
  end
puts Mood.neutral('Playlist Path:') if Opts[:args][:pretend]
p playlistpath if Opts[:args][:pretend]
root = YtDl.directory.to_s.include?('/data/Videos') ? '/data/Videos' : YtDl.directory.parent.to_s

if Opts[:args][:stats]
  stats = YTDL::Stats.new(Files, pretend: Opts[:args][:pretend])
  stats.genstatsfl!
  stats.genstats
end

if Opts[:args][:mux]
  muxfiles = Files.dup.delete_if { |i| i.extname == '.mka' || i.extname == '.mkv' }
  mux = ConvertMkv::Mux.new(muxfiles, YtDl.directory)
  mux.mkvmerge unless Opts[:args][:ffmpegmux]
  mux.ffmpeg if Opts[:args][:ffmpegmux]
end

plfilenames = YtDl.filenames.respond_to?(:empty?) && YtDl.filenames.empty? && !(Opts[:args][:no_download] || Opts[:args][:pretend]) ? Files : YtDl.filepaths

pl = YTDL::Playlist.new(plfilenames, playlistpath.to_s, YtDl.directory, root, resetplaylist: Opts[:args][:resetplaylist], pretend: Opts[:args][:pretend], noblacklist: Opts[:args][:no_blacklist])
pl.blacklist unless Opts[:args][:playlist]
pl.genplfilelist! if Opts[:args][:playlist] || Opts[:args][:pretend]

begin
  pl.genplaylist(Opts[:args][:drive_letter]) if [Opts[:args][:playlist], Opts[:args][:drive_letter], !YtDl.directory.to_s.include?('/data/Videos/Youtube')].all?
  pl.genplaylist if [Opts[:args][:playlist], YtDl.directory.to_s.include?('/data/Videos/Youtube')].all?
rescue Interrupt => e
  raise e
else
  pl.blacklist if Opts[:args][:playlist]
end
