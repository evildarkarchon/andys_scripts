#!/usr/bin/env ruby
require 'optparse'
require 'subprocess'
require 'pathname'
require 'filemagic'
require 'uri'
# require 'json'

require_relative 'andyrb/videoinfo_dm'
require_relative 'andyrb/mood'
require_relative 'andyrb/util'

class Options
  def self.parse(args)
    options = OpenStruct.new
    options.date = Time.now.strftime("%Y%m%d") # rubocop:disable Style/StringLiterals, Lint/UnneededDisable
    options.directory = Pathname.new('/data/Videos/Youtube')
    options.subdirectory = nil
    options.no_date = false
    options.force = false
    options.test_mkv = false
    options.no_stats = false

    optparse = OptionParser.new do |opts|
      opts.on('-d', '--directory [DIRECTORY]', 'Name of the directory to download to') { |dir| options.directory = Pathname.new(dir) }
      opts.on('-s', '--subdirectory [SUBDIRECTORY]', 'Optional subdirectory to tack on the end (only used if directory is set to the default)') { |dir| options.subdirectory = dir.to_s }
      opts.on('-n', '--no-date', "Don't create a subdirectory with the date (only needed if directory is set to the default)") { options.no_date = true }
      opts.on('-f', '--force', "Don't add the url(s) to the list of succesfully downloaded videos or read from said list.") { options.force = true }
      opts.on('--test-mkv', 'Skip running youtube-dl and just test the statistics code.') { options.test_mkv = true }
      opts.on('--no-stats', "Don't calculate statistics for MKV files.") { options.no_stats = true }
    end
    optparse.parse!(args)
    options
  end
end
ARGV.compact! if ARGV.respond_to?(:compact!)
ARGV.flatten! if ARGV.respond_to?(:flatten!)
Args = Options.parse(ARGV)

Urls = ARGV
Urls.keep_if { |url| url =~ /\A#{URI.regexp(%w(http https))}\z/ }
raise 'No URLs specified (or code is bugged)' if Urls.empty? || Urls.nil?

case
when !Args.no_date && Args.directory.to_s.include?('/data/Videos/Youtube')
  Args.directory = Args.directory + Args.date
end

YoutubeDL = Util::FindApp.which('youtube-dl')
MkvPropEdit = Util::FindApp.which('mkvpropedit')

Archive = Args.directory + 'downloaded.txt' if Args.no_date
Archive = Args.directory.parent + 'downloaded.txt' unless Args.no_date
case
when Args.subdirectory && Args.subdirectory.is_a?(String)
  Util.block do
    dirname = Args.directory.to_s
    Args.directory = Args.directory + Args.subdirectory if dirname.include?('/data/Videos/Youtube')
    puts Mood.neutral('Directory is not /data/Videos/Youtube, subdirectory statement ignored.') unless dirname.include?('/data/Videos/Youtube')
  end
end

case
when Args.directory.exist? && !Args.directory.directory?
  puts Mood.sad("#{Args.directory} exists but is not a directory.")
  exit 1
when !Args.directory.exist?
  puts Mood.happy("Creating Directory #{Args.directory}")
  Args.directory.mkpath
end
Dir.chdir(Args.directory.to_s)

case
when Args.force && !Args.test_mkv
  Util::Program.runprogram(%w(youtube-dl) + Urls)
  # print %w(youtube-dl) + Urls\n
when !Args.force && !Args.test_mkv
  Util::Program.runprogram(%W(youtube-dl --download-archive #{Archive}) + Urls)
  # print %W(youtube-dl --download-archive #{Args.directory}/downloaded.txt) + Urls\n
end

Files = Pathname.glob("#{Args.directory}/**")
case
when !Args.no_stats
  Files.keep_if do |file|
    magic = FileMagic.new(:mime_type)
    whitelist = ['video/webm', 'video/x-matroska', 'audio/x-matroska']
    # puts file
    # puts magic.file(file.to_s)
    whitelist.include?(magic.file(file.to_s))
  end
  Files.keep_if do |file|
    json = Util.recursive_symbolize_keys(GenerateVideoInfo.probe(file))
    # print json.dig(:streams[0], :tags, :BPS)
    # puts json
    # puts 'Nope' if json.dig(:streams, 0, :tags, :BPS)
    # false if json[:streams][0] && json[:streams][0][:tags] && json[:streams][0][:tags][:BPS]
    # true unless json[:streams][0] && json[:streams][0][:tags] && json[:streams][0][:tags][:BPS]
    bps = json.dig(:streams, 0, :tags, :BPS)
    false if bps
    true unless bps
  end
end
# puts Files
exit if Files.empty? || Files.nil?
Files.each do |file|
  puts Mood.happy("Adding statistic tags to #{file}")
  Util::Program.runprogram(%W(#{MkvPropEdit} --add-track-statistics-tags #{file}))
end
