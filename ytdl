#!/usr/bin/env ruby
require 'optparse'
require 'subprocess'
require 'pathname'
require 'filemagic'
require 'uri'

require_relative 'andyrb/videoinfo_dm'
require_relative 'andyrb/mood'
require_relative 'andyrb/util'

class Options
  def self.parse(args)
    options = OpenStruct.new
    options.date = Time.now.strftime("%Y%m%d") # rubocop:disable Style/StringLiterals, Lint/UnneededDisable
    options.directory = Pathname.new('/data/Videos/Youtube')
    options.subdirectory = nil
    options.no_date = false
    options.force = false
    options.pretend = false
    options.no_stats = false
    options.archive = nil
    options.mkv_only = false

    optparse = OptionParser.new do |opts|
      opts.on('-d', '--directory [DIRECTORY]', 'Name of the directory to download to') { |dir| options.directory = Pathname.new(dir) }
      opts.on('-a', '--archive [DIRECTORY]', 'Directory for the downloaded video list') { |dir| options.archive = Pathname.new(dir) }
      opts.on('-s', '--subdirectory [SUBDIRECTORY]', 'Optional subdirectory to tack on the end (only used if directory is set to the default)') { |dir| options.subdirectory = dir.to_s }
      opts.on('-n', '--no-date', "Don't create a subdirectory with the date (only needed if directory is set to the default)") { options.no_date = true }
      opts.on('-f', '--force', "Don't add the url(s) to the list of succesfully downloaded videos or read from said list.") { options.force = true }
      opts.on('--pretend', "Don't actually run youtube-dl or mkvpropedit (mostly for testing code that doesn't rely on either program running)") { options.pretend = true }
      opts.on('--mkv-only', "Don't run youtube-dl but run mkvpropedit.") { options.mkv_only = true }
      opts.on('--no-stats', "Don't calculate statistics for MKV files.") { options.no_stats = true }
    end
    optparse.parse!(args)
    options
  end
end
ARGV.compact! if ARGV.respond_to?(:compact!)
ARGV.flatten! if ARGV.respond_to?(:flatten!)
ARGV.uniq! if ARGV.respond_to?(:uniq!)
Args = Options.parse(ARGV)

Urls = ARGV
Urls.keep_if { |url| url =~ /\A#{URI.regexp(%w(http https))}\z/ }

raise 'No URLs specified (or code is bugged)' if (Urls.empty? || Urls.nil?) && !Args.pretend

Args.directory = Args.directory + Args.date if Args.directory.to_s == '/data/Videos/Youtube' && !Args.no_date

YoutubeDL = Util::FindApp.which('youtube-dl')
MkvPropEdit = Util::FindApp.which('mkvpropedit')
raise "Couldn't find youtube-dl" unless YoutubeDL
raise "Couldn't find mkvpropedit" unless (MkvPropEdit && !Args.no_stats) || Args.no_stats
raise 'youtube-dl is not executable' unless YoutubeDL && File.executable?(YoutubeDL)
raise 'mkvpropedit is not executable' unless (MkvPropEdit && File.executable?(MkvPropEdit) && !Args.no_stats) || Args.no_stats

Archive = case
when Args.archive
  Args.archive + 'downloaded.txt'
when !Args.no_date && Args.directory.to_s.include?('/data/Videos/Youtube')
  Args.directory.parent + 'downloaded.txt'
else
  Args.directory + 'downloaded.txt'
end # rubocop:disable Lint/EndAlignment
case
when Args.subdirectory && Args.subdirectory.is_a?(String)
  Util.block do
    dirname = Args.directory.to_s
    Args.directory = Args.directory + Args.subdirectory if dirname.include?('/data/Videos/Youtube')
    puts Mood.neutral('Directory is not /data/Videos/Youtube, subdirectory statement ignored.') unless dirname.include?('/data/Videos/Youtube')
  end
end

case
when Args.directory.exist? && !Args.directory.directory?
  raise "#{Args.directory} exists but is not a directory."
when !Args.directory.exist?
  puts Mood.happy { "Creating Directory #{Args.directory}" }
  Args.directory.mkpath
end
Dir.chdir(Args.directory.to_s)

ytdlf = %w(youtube-dl) + Urls if Args.force
ytdln = %W(youtube-dl --download-archive #{Archive}) + Urls unless Args.force

Util::Program.runprogram(ytdlf) if Args.force && !Args.pretend && !Args.mkv_only
Util::Program.runprogram(ytdln) unless Args.force && !Args.pretend && !Args.mkv_only
case
when Args.force && Args.pretend && !Urls.nil? && !Urls.empty? && !Args.mkv_only
  print "#{ytdlf}\n"
when !Args.force && Args.pretend && !Urls.nil? && !Urls.empty? && !Args.mkv_only
  print "#{ytdln}\n"

Files = Args.directory.find.to_a
puts Mood.neutral('No matroska files to calculate statistics for.') if Files.nil? || Files.empty?
exit if Files.nil? || Files.empty?
case
when !Args.no_stats
  Files.keep_if { |filename| filename.file? } # rubocop:disable Style/SymbolProc

  puts Mood.neutral('Step 1:') if Args.pretend
  print "#{Files}\n" if Args.pretend
  Files.keep_if do |file|
    magic = FileMagic.new(:mime_type)
    whitelist = %w(video/webm video/x-matroska audio/x-matroska)
    # whitelist = ['video/webm', 'video/x-matroska', 'audio/x-matroska']
    whitelist.include?(magic.file(file.to_s))
  end

  puts Mood.neutral('Step 2:') if Args.pretend
  print "#{Files}\n" if Args.pretend
  Files.delete_if do |file|
    json = Util.recursive_symbolize_keys(GenerateVideoInfo.probe(file))
    case
    when json.respond_to?(:dig)
      json.dig(:streams, 0, :tags, :BPS)
    when !json.respond_to?(:dig)
      true if json[:streams][0] && json[:streams][0][:tags] && json[:streams][0][:tags][:BPS]
      false unless json[:streams][0] && json[:streams][0][:tags] && json[:streams][0][:tags][:BPS]
    end
  end
end

puts Mood.neutral('Step 3:') if Args.pretend
print "#{Files}\n" if Args.pretend
puts Mood.neutral('No matroska files to calculate statistics for.') if Files.nil? || Files.empty?
exit if Files.nil? || Files.empty?

Files.each do |file|
  puts Mood.happy("Adding statistic tags to #{file}")
  cmd = %W(#{MkvPropEdit} --add-track-statistics-tags #{file})
  Util::Program.runprogram(cmd) unless Args.pretend
  puts cmd if Args.pretend
end
